---
title: "506Problem5"
author: "Snigdha Pakala"
format:
  html:
    embed-resources: true
editor: visual
---

## Link to GitHub Repository: <https://github.com/snigdhapakala/snigdhapakala-506_ProblemSet5>

### Problem 1

#### Part 1a:

```{r}

library(methods)

# Defining and setting the rational class
setClass(
  "rational",
  slots = c(numerator = "numeric", denominator = "numeric"),
  prototype = list(numerator = 0, denominator = 1)
)

# Creating a constructor using "new"; Problem 1a, part 1
rational <- function(numerator, denominator) {
  if (denominator == 0) stop("Denominator cannot be zero.")
  new("rational", numerator = numerator, denominator = denominator)
}

# Creating a validator that ensures the denominator is non-zero; Problem 1a, part 2
setValidity("rational", function(object) {
  if (object@denominator == 0) {
    return("Denominator cannot be zero.")
  }
  TRUE
})

# Creating a show method to display the value; Problem 1a, part 3
setMethod("show", "rational", function(object) {
  cat(paste0(object@numerator, "/", object@denominator, "\n"))
})

# Creating the gcd function required in Problem 1a, part 7; recursive gcd function
gcd <- function(a, b) {
  if (b == 0) return(abs(a))
  gcd(b, a %% b)
}

# Use gcd function to create simplify method; Problem 1a, part 4
setGeneric("simplify", function(object) standardGeneric("simplify"))
setMethod("simplify", "rational", function(object) {
  divisor <- gcd(object@numerator, object@denominator)
  object@numerator <- object@numerator / divisor
  object@denominator <- object@denominator / divisor
  object
})

# Creating a quotient method to calculate quotient of the rational; Problem 1a, part 5
setGeneric("quotient", function(object, digits = NULL) standardGeneric("quotient"))
setMethod("quotient", "rational", function(object, digits = NULL) {
  result <- object@numerator / object@denominator
  # Checking if user specified the number of digits of the quotient
  if (!is.null(digits)) round(result, digits) else result
})

# Problem 1a, part 6: addition
setMethod("+", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  # the logic below shows the following: a/b + c/d becomes ad/bd + cb/bd = ad+cb / bd
  num <- e1@numerator * e2@denominator + e2@numerator * e1@denominator
  denom <- e1@denominator * e2@denominator
  # simplify the rational
  simplify(rational(num, denom))
})

# Problem 1a, part 6: subtraction
setMethod("-", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  # the logic below shows the following: a/b +-c/d becomes ad/bd - cb/bd = ad-cb / bd
  num <- e1@numerator * e2@denominator - e2@numerator * e1@denominator
  denom <- e1@denominator * e2@denominator
    # simplify the rational
  simplify(rational(num, denom))
})

# Problem 1a, part 6: multiplication
setMethod("*", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  # the logic below shows the following: a/b * c/d becomes ac / bd
  num <- e1@numerator * e2@numerator
  denom <- e1@denominator * e2@denominator
  # simplify the rational
  simplify(rational(num, denom))
})

# Problem 1a, part 6: division
setMethod("/", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  # Ensuring division by 0 errors
  if (e2@numerator == 0) stop("Cannot divide by zero.")
  # the logic below shows a/b / c/d which is a/b * d/c so we get ad/bc
  num <- e1@numerator * e2@denominator
  denom <- e1@denominator * e2@numerator
  # simplify the rational
  simplify(rational(num, denom))
})

# Lastly, create LCM function in Problem 1a, part 7, since gcd is above
lcm <- function(a, b) {
  abs(a * b) / gcd(a, b)
}
```

#### Part 1b:

```{r, error=TRUE}
# Use the rational class to create the following 3 objects:
r1 <- rational(24, 6)
r2 <- rational(7, 230)
r3 <- rational(0, 4)

# Evaluate the following:
r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3 # error number 1
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado") # error number 2
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)
```

#### Part 1c:

```{r, error=TRUE}
# Show that your validator does not allow the creation of rationalâ€™s with 0 denominator
setValidity("rational", function(object) {
  # In my code, I require that numerator and denominator are integers (single numeric objects) where the denominator is not equal to 0
  if (length(object@numerator) != 1 || length(object@denominator) != 1) {
    return("Numerator and denominator must be single numeric values.")
  }
  if (!is.numeric(object@numerator) || !is.numeric(object@denominator)) {
    return("Both numerator and denominator must be numeric.")
  }
  if (object@denominator == 0) {
    return("Denominator cannot be zero.")
  }
  TRUE
})

# Check other malformed input to your constructor: the following code will error
new("rational", numerator = 3, denominator = 0) # errors because denominator is 0
new("rational", numerator = "3", denominator = 4) # errors because numerator is string
new("rational", numerator = c(3, 5), denominator = 4) # errors because of vector in numerator
```

### Problem 2

#### Part 2a: 

```{r}
#####################################################################
# my 3b from last homework:
#####################################################################

# art_sales <- read.csv("df_for_ml_improved_new_market.csv")
# 
# library(ggplot2)
# library(dplyr)
# library(tidyr)
# library(stringr)
# 
# art_sales_long <- art_sales %>%
#   pivot_longer(cols = starts_with("Genre__"), names_to = "Genre", values_to = "Sales") %>%
#   filter(Sales == 1) %>%  # Filter only where genre is marked as 1
#   mutate(Genre = str_replace(Genre, "Genre___", "")) %>%  # Remove "Genre___" prefix 
#   count(year, Genre) %>%
#   group_by(year) %>%
#   mutate(Proportion = (n / sum(n)))  # Calculate proportion per year
# 
# 
# ggplot(art_sales_long, aes(x = year, y = Proportion, fill = Genre)) +
#   geom_bar(stat = "identity") +
#   scale_fill_brewer(palette = "Pastel1") +
#   labs(title = "Distribution of Art Sales by Genre Across Years",
#        x = "Year",
#        y = "Proportion of Sales",
#        fill = "Genre") +
#   theme_minimal(base_size = 14) +  
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))

#####################################################################
# Modifying my 3b from last hw using plotly:
#####################################################################
library(plotly)
library(dplyr)
library(tidyr)
library(stringr)

# Load and preprocess data
art_sales <- read.csv("df_for_ml_improved_new_market.csv")

# same as last time
art_sales_long <- art_sales %>%
  pivot_longer(cols = starts_with("Genre__"), names_to = "Genre", values_to = "Sales") %>%
  filter(Sales == 1) %>%  # Filter only where genre is marked as 1
  mutate(Genre = str_replace(Genre, "Genre___", "")) %>%  # Remove "Genre___" prefix 
  count(year, Genre) %>%
  group_by(year) %>%
  mutate(Proportion = (n / sum(n)))  # Calculate proportion per year

# Create an interactive plot with Plotly
plot <- plot_ly(
          data = art_sales_long,
          x = ~year,
          y = ~Proportion,
          type = "bar",
          color = ~Genre,
          colors = "Pastel1") %>% 
        layout(
          title = "Distribution of Art Sales by Genre Across Years",
          xaxis = list(title = "Year"),
          yaxis = list(title = "Proportion of Sales"),
        barmode = "stack",  # Stack the bars for grouped visualization
        margin = list(
          t = 80,  # Top margin
          b = 70,  # Bottom margin 
          l = 50,  # Left margin
          r = 50   # Right margin
        )
      )

# Display the plot
plot

```

#### Part 2b:

```{r}
library(plotly)
library(dplyr)
library(tidyr)
library(stringr)


# Overall trend of average sales price over time
art_sales_by_year <- art_sales %>%
  group_by(year) %>%
  summarize(avg_sales_price = mean(price_usd, na.rm = TRUE), .groups = "drop") %>%
  ungroup()

# Average sales price per genre per year
average_price_genre <- art_sales %>%
  pivot_longer(
    cols = starts_with("Genre__"),
    names_to = "Genre",
    values_to = "Sales"
  ) %>%
  filter(Sales == 1) %>%  # Keep only rows where a genre is marked as sold
  mutate(Genre = str_replace(Genre, "Genre___", "")) %>%
  group_by(year, Genre) %>%
  summarize(Average_Price = mean(price_usd, na.rm = TRUE), .groups = "drop") %>%
  ungroup()

# Combine data for an interactive plot
combined_data <- bind_rows(
  art_sales_by_year %>% mutate(Genre = "All", Average_Price = avg_sales_price),
  average_price_genre
)

# Create interactive Plotly plot
plot <- plot_ly(
  data = combined_data,
  x = ~year,
  y = ~Average_Price,
  type = "scatter",
  mode = "lines+markers",
  color = ~Genre,
  colors = "Pastel1",
  # Hover over info
  text = ~paste(
    "Year:", year,
    "<br>Genre:", Genre,
    "<br>Average Price (USD):", round(Average_Price, 2)
  ),
  hoverinfo = "text",
  line = list(
    width = ~ifelse(Genre == "All", 4, 2)  # Make "All" line thicker to see sales over time 
  )
) %>%
  layout(
    title = "Average Sales Price Over Time by Genre",
    xaxis = list(
      title = "Year",
      tickangle = 45
    ),
    yaxis = list(
      title = "Average Sale Price (USD)"
    ),
    # Add legend at the bottom of the graph
    legend = list(
      title = list(text = "Genre"),
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.2
    ),
    margin = list(t = 70, b = 80, l = 50, r = 30),
    hovermode = "closest"
  )

# Display the plot
plot

```

The two questions this graph is meant to answer are:

1.   Is there a change in the sales price in USD over time?

```{=html}
<!-- -->
```
2.  How does the genre affect the change in sales price over time?

By combining the data to include each individual genre as well as an "all genres" trendline, we see that we can address both questions clearly. To answer the first question, we look at the boldened "All" genres pink line, and since it is generally trending upwards, we can see that the sales price in USD over time (regardless of genre) does, in fact, seem to be increasing. And to address question #2, we can look at each individual trend line by genre, signified by the different colors, to see all the individual trends. By clicking on each value in the legend, we can toggle that trend line on and off, making it easier to see individual or high level trends.

### Problem 3

#### Part 3a:

```{r}
library(nycflights13)
library(data.table)

# Convert flights and airports to data.tables
flights <- as.data.table(flights)
airports <- as.data.table(airports)
planes <- as.data.table(planes)

#####################################################################
# 1a in Problem Set 4: 
#####################################################################
# Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport.
# Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport.
# Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

#####################################################################
# Problem Set 4, 1a, Departures:
#####################################################################
# Group by destination, count flights, and filter destinations with >= 10 flights
flights_10_plus <- flights[, .N, by = dest][N >= 10] 

# Join flights data to get corresponding details for destinations with >= 10 flights
flights_10_plus <- flights[dest %in% flights_10_plus$dest]

# Departure delays by origin
flights_dep_stats <- flights_10_plus[, .(mean_dep_delay = round(mean(dep_delay, na.rm = TRUE), 5), median_dep_delay = round(median(dep_delay, na.rm = TRUE), 5)), by = origin]

# Merge with airport names
departures <- merge(flights_dep_stats, airports, by.x = "origin", by.y = "faa")[, .(name, mean_dep_delay, median_dep_delay)]

# Order departures by descending mean delay
departures <- departures[order(-mean_dep_delay)]

# Display Departure Results
departures

#####################################################################
# Problem Set 4, Part a, Arrivals:
#####################################################################

# Arrival delays by destination
flights_arr_stats <- flights_10_plus[, .(mean_arr_delay = round(mean(arr_delay, na.rm = TRUE), 5), median_arr_delay = round(median(arr_delay, na.rm = TRUE), 5)), by = dest]

# Merge with airport names for arrival stats
arrivals <- merge(flights_arr_stats, airports, by.x = "dest", by.y = "faa", all.x = TRUE)

# If name is NA, use faa (airport code) instead of name to include all airport destinations
arrivals[, name := ifelse(is.na(name), as.character(dest), name)]

# Order arrivals by descending mean delay
arrivals <- arrivals[order(-mean_arr_delay)]

# Select columns in the required order: name, mean_arr_delay, median_arr_delay
arrivals <- arrivals[, .(name, mean_arr_delay, median_arr_delay)]

# Display Arrival Results:
arrivals


#####################################################################
# 1b in Problem Set 4: 
#####################################################################
# How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.

# Combine flights with planes by 'tailnum' (plane identification number) to get model in data
flights_planes <- merge(flights, planes, by = "tailnum", all.x = TRUE)

# Calculate speed in mph
flights_planes[, speed_mph := distance / (air_time / 60)]

# Group by plane model and calculate the average speed and number of flights
fastest_plane <- flights_planes[, .(avg_speed_mph = round(mean(speed_mph, na.rm = TRUE), 4), num_flights = .N), by = model][order(-avg_speed_mph)][1]

# Display the fastest plane's details
fastest_plane


```

#### Attribution of Sources

-   1b: evaluating the output - Used chat gpt to figure out how to bypass errors in R
-   2a: <https://plotly.com/r/bar-charts/> - Used this link to figure out how to do a stacked bar chart using plotly
-   2a: <https://plotly.com/r/setting-graph-size/> - used this to help set the margin padding for the words in the chart
-   2b: <https://dplyr.tidyverse.org/reference/bind_rows.html> - used this to combine data in both objects used in 2b, art_sales_by_year and average_price_genre
-   2b: <https://plotly.com/r/hover-text-and-formatting/> - used for text formatting like hover over text with hoverinfo = "text"
-   2b: <https://plotly.com/r/line-and-scatter/> - used for demonstrating lines and points together with mode = "lines+markers"
-   3: <https://www.rdocumentation.org/packages/data.table/versions/1.16.2/topics/merge> - double checking merge syntax for data tables
